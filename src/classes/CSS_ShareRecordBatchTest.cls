/**
 * Test class for the Customer Self Service Community Record Sharing Batch class. 
 *
 * @author Craig Poirier
 * @version 1.0
 * @see CSS_ShareRecordBatch
 */
@isTest
private class CSS_ShareRecordBatchTest {

  /**
   * CRON expression: midnight on March 15. Because this is a test, job executes immediately 
   * after Test.stopTest(). 
   */
  public static String CRON_EXPRESSION = '0 0 0 15 3 ? 2022';


  /**
   * The setup method is use to create test records once then access them in every test method
   * in this test class.
   */
  @testSetup static void setup() {
    CSS_TestDataFactory.setEnviroment(true, true);
    CSS_TestDataFactory.createCommunityUsers();
  }

  /** 
   * Test generation of a query locator query string for orders, SAP invoices, and cases. Also,
   * test with an invalid sObjectType, which is not in the process today.
   */
  @isTest static void testGetQueryString() {
    Test.startTest();

    // The test setup method setup just created a new permission for these new users
    String query = CSS_ShareRecordBatch.getQueryString(Order__c.sObjectType);
    System.assert(query.toLowerCase().contains('from order__c'), 'Expected an Order__c query');
    query = CSS_ShareRecordBatch.getQueryString(SAP_Invoice__c.sObjectType);
    System.assert(query.toLowerCase().contains('from sap_invoice__c'), 'Expected an SAP_Invoice__c query');
    query = CSS_ShareRecordBatch.getQueryString(Case.sObjectType);
    System.assert(query.toLowerCase().contains('from case'), 'Expected an Case query');
    
    try { // test with an invalid object type
      query = CSS_ShareRecordBatch.getQueryString(Asset.sObjectType); // assuming asset is not in process
      System.assert(false, 'Code execution should not reach this point due to an expected thrown exception.');
    }
    catch (Exception ex) {
      System.assert(String.isNotBlank(ex.getMessage()), 'Expecting an error message due to thrown exception.');
    }
    Test.stopTest();
  }


  /** 
   * Test updating a specific community partner user, which is generated by the Test Data Factory.
   * Note that all asynchronous code included within Test.startTest and Test.stopTest below will
   * get executed synchronously after Test.stopTest.
   */
  @isTest static void testUpdateVisibility() {
    Test.startTest();

    // Verify the user is not dirty yet.
    User usr = CSS_TestDataFactory.getCommunityUser();
    System.assertEquals(false, usr.Community_Dirty_Flag__c);

    // Verify the user is now dirty yet after making it dirty
    String result = CSS_ShareRecordBatch.updateVisibility(usr.ContactId); 
    usr = CSS_TestDataFactory.getCommunityUser();
    System.assertEquals(true, usr.Community_Dirty_Flag__c);
    System.assertEquals(System.Label.CSS_Sharing_Submitted, result);

    // Verify the reconcile process is being schedule upon multiple requests
    String result2 = CSS_ShareRecordBatch.updateVisibility(usr.ContactId);
    String result3 = CSS_ShareRecordBatch.updateVisibility(usr.ContactId);
    System.assertEquals(System.Label.CSS_Sharing_Scheduled, result3);
  
    Test.stopTest(); // execute asynchronous code synchronously...

    // Verify the user is no longer dirty
    usr = CSS_TestDataFactory.getCommunityUser();
    System.assertEquals(false, usr.Community_Dirty_Flag__c);
  }
  
   /** 
   * Test generation of a query locator query string for orders, SAP invoices, and cases. Also,
   * test with an invalid sObjectType, which is not in the process today.
   */
  @isTest static void testUpdateVisibilityWithBadId() {
    Test.startTest();
    String result = CSS_ShareRecordBatch.updateVisibility('bad_identifier'); 
    System.assert(result.toLowerCase().contains('failed'), 
      'Expected an error message due to expected exception.');
    Test.stopTest();
  }


  /** 
   * Test the ad-hoc schedule functionality of the batch processor. Note that all asynchronous
   * code included within Test.startTest and Test.stopTest below will get executed synchronously
   * after Test.stopTest. Only the first asynchronous code is executed.
   */
   static testmethod void testSchedulableExecute() {
    Test.startTest();

    // Schedule the test job and get the information from the CronTrigger API object
    String jobId = System.schedule('CSS_ShareRecordBatchTest', CRON_EXPRESSION, 
      new CSS_ShareRecordBatch());
    CronTrigger cTrigger = [SELECT Id, CronExpression, TimesTriggered, NextFireTime
      FROM CronTrigger WHERE id = :jobId];
   
    // Verify the expressions are the same
    System.assertEquals(CRON_EXPRESSION, cTrigger.CronExpression);

    // Verify the job has not run and the next time the job will run
    System.assertEquals(0, cTrigger.TimesTriggered);
    System.assertEquals('2022-03-15 00:00:00', String.valueOf(cTrigger.NextFireTime));
    Test.stopTest(); // execute asynchronous code synchronously...

  }

}