/**
 * The Invoice Document Service for the customer self service community leverages SAP and
 * webMethods to generate a PDF document. This test class verifies this functionality
 *
 * This test class implments the WebServiceMock interface to instruct the Apex runtime engine to 
 * generate a fake response whenever WebServiceCallout.invoke is called.
 *
 * @author Craig Poirier
 * @version 1.0
 * @see JM_InvoiceDocumentService, CSS_SAPInvoiceDetailService
 */
@isTest
private class CSS_SAPInvoiceDocumentServiceTest implements WebServiceMock {

  /**
   * The setup method is use to create test records once then access them in every test method
   * in this test class. For this test class we only need to bypass triggers and validations.
   */
  @testSetup static void setup() {
    CSS_TestDataFactory.setEnviroment(true, true); // bypass triggers and validations
    CSS_TestDataFactory.createCommunityUsers();
  }

  /** 
   * Test retrieval of SAP invoice line items (i.e., details) using a mock web service.
   */
  @isTest static void testPrintDocument() {
    Test.setMock(WebServiceMock.class, new CSS_SAPInvoiceDocumentServiceTest());

    Test.startTest();
    SAP_Invoice__c invoice = [SELECT Name, Invoice_Number__c FROM SAP_Invoice__c 
      WHERE Invoice_Number__c = '123456789' LIMIT 1];
    String fileId = CSS_SAPInvoiceDocumentService.printDocument(invoice.id, '0911111111');
    System.assert(String.isNotBlank(fileId), 'Expecting an attachment identitifer');
    Test.stopTest();
  }

  /** 
   * Test that the proper error message is displayed when the service is down
   */
  @isTest static void testPrintDocumentWithErrors() {
    Test.startTest();
    try {
      SAP_Invoice__c invoice = [SELECT Name, Invoice_Number__c FROM SAP_Invoice__c 
        WHERE Invoice_Number__c = '123456789' LIMIT 1];
      String fileId = CSS_SAPInvoiceDocumentService.printDocument(invoice.id, '0911111111');
      System.assert(false, 'Code execution should not reach this point due to an expected thrown exception.');
    }
    catch (Exception ex) {
      System.assert(String.isNotBlank(ex.getMessage()), 'Expecting an error message due to thrown exception.');
    }
    Test.stopTest();
  }

  /** 
   * When you create an Apex class from a WSDL, the methods in the auto-generated class call 
   * WebServiceCallout.invoke, which performs the callout to the external service. To test these
   * these methods such as Print Document, we need to instruct the Apex runtime to generate a 
   * fake response whenever WebServiceCallout.invoke is called. 
   *
   * To do so, we implemented the WebServiceMock interface (see above) and specifed a fake response 
   * for the Apex runtime to send within this method.
   */
  public void doInvoke(Object stub, Object request, Map<String, Object> response, String endpoint,
    String soapAction, String requestName, String responseNS, String responseName, String responseType) {
    
    // Create a fake web service output
    JM_InvoiceDocumentService.InvoicePdfOutput output = new JM_InvoiceDocumentService.InvoicePdfOutput();
    output.invoicePdfImageJSON = '{"contentType" : "application/pdf","invoicePdfImage" : "CONTENT=="}';

    // Create response element from the autogenerated class add it to the response parameter
    JM_InvoiceDocumentService.getInvoicePdfFileResponse element = 
      new JM_InvoiceDocumentService.getInvoicePdfFileResponse();
    element.invoicePdfOutput = output;
    response.put('response_x', element); 
  }
}